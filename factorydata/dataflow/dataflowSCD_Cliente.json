{
	"name": "dataflowSCD_Cliente",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "SourceSTGCliente"
				},
				{
					"name": "ExistingDimCliente"
				}
			],
			"sinks": [
				{
					"name": "sinkDimCliente"
				},
				{
					"name": "sinkDimClienteCambios"
				}
			],
			"transformations": [
				{
					"name": "derivedColumnHash"
				},
				{
					"name": "existsSTGvsSQL"
				},
				{
					"name": "derivedColumnExisting"
				},
				{
					"name": "lookupNuevosCambios"
				},
				{
					"name": "conditionalSplitEsNuevo"
				},
				{
					"name": "alterRowInsert"
				},
				{
					"name": "alterRowUpdate"
				}
			],
			"scriptLines": [
				"source(output(",
				"          cod_cliente as string,",
				"          Nombre as string,",
				"          Apellido as string,",
				"          id_localidad as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> SourceSTGCliente",
				"source(output(",
				"          Cod_Cliente as integer,",
				"          Nombre_Cliente as string,",
				"          Apellido_Cliente as string,",
				"          Cod_Localidad as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> ExistingDimCliente",
				"SourceSTGCliente derive(SourceHash = sha2(256,cod_cliente, Nombre, Apellido, id_localidad),",
				"          cod_cliente_int = toInteger(cod_cliente)) ~> derivedColumnHash",
				"derivedColumnHash, derivedColumnExisting exists(cod_cliente_int == ExistingDimCliente@Cod_Cliente,",
				"     negate:true,",
				"     broadcast: 'auto')~> existsSTGvsSQL",
				"ExistingDimCliente derive(existingHash = sha2(256,Cod_Cliente, Nombre_Cliente, Apellido_Cliente, Cod_Localidad)) ~> derivedColumnExisting",
				"existsSTGvsSQL, derivedColumnExisting lookup(cod_cliente_int == ExistingDimCliente@Cod_Cliente,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupNuevosCambios",
				"lookupNuevosCambios split(isNull(ExistingDimCliente@Cod_Cliente),",
				"     disjoint: false) ~> conditionalSplitEsNuevo@(Esnuevo, EsModificado)",
				"conditionalSplitEsNuevo@Esnuevo alterRow(insertIf(1==1)) ~> alterRowInsert",
				"conditionalSplitEsNuevo@EsModificado alterRow(updateIf(1==1)) ~> alterRowUpdate",
				"alterRowInsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     format: 'table') ~> sinkDimCliente",
				"alterRowUpdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     format: 'table') ~> sinkDimClienteCambios"
			]
		}
	}
}